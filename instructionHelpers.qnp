
define INS_OPCODE_OFFSET                 0
define INS_OPCODE_WIDTH                  5

define INS_REG_DEST_OFFSET               5
define INS_REG_DEST_WIDTH                4

define INS_JMP_COND_OFFSET               5
define INS_JMP_COND_WIDTH                4

define INS_OP_SIZE_OFFSET                9
define INS_OP_SIZE_WIDTH                 2

define INS_OFF_SEL_OFFSET               11
define INS_OFF_SEL_WIDTH                 1

define INS_REG_SRC1_OFFSET              12
define INS_REG_SRC1_WIDTH                4

define INS_REG_SRC2_OFFSET              16
define INS_REG_SRC2_WIDTH                4

define INS_IMM_LONG_OFFSET               9
define INS_IMM_LONG_WIDTH               23

define INS_IMM_SHORT_OFFSET             16
define INS_IMM_SHORT_WIDTH              16

define INS_IMM_SHORT_UNUSED_OFFSET       9
define INS_IMM_SHORT_UNUSED_WIDTH        3

define INS_OFF_SHORT_OFFSET             20
define INS_OFF_SHORT_WIDTH              12

define INS_OFF_LONG_CONT_OFFSET         16
define INS_OFF_LONG_CONT_WIDTH          16

define INS_OFF_LONG_SPLIT_LWR_OFFSET     5
define INS_OFF_LONG_SPLIT_LWR_WIDTH      4

define INS_OFF_LONG_SPLIT_UPR_OFFSET    20
define INS_OFF_LONG_SPLIT_UPR_WIDTH     12

enum InsCode:
    none,
    add, sub,
    and, or, xor,
    shl, shr,
    jz, jnz, jgz, jlz, jge, jle,
    jrz, jrnz, jrgz, jrlz, jrge, jrle,
    st, ld,
    lui, lli, li,
    int,
    not,
    jpr

enum OpCode:
    add      = 0b00000,
    sub      = 0b00001,
    mul      = 0b00010,
    div      = 0b00011,
    imul     = 0b00100,
    idiv     = 0b00101,
    and      = 0b00110,
    or       = 0b00111,
    xor      = 0b01000,
    shl      = 0b01001,
    shr      = 0b01010,
    sal      = 0b01011,
    sar      = 0b01100,
    rol      = 0b01101,
    ror      = 0b01110,
    jxx      = 0b01111,
    jrx      = 0b10000,
    st       = 0b10001,
    ld       = 0b10010,
    lui      = 0b10011,
    lli      = 0b10100,
    li       = 0b10101,
    int      = 0b10110,
    none     = 0b111111

enum InsType:
    none,
    threeArg,
    condBranch,
    memRead,
    memWrite,
    immLoadFull,
    immLoadUpper,
    immLoadLower

enum RegID:
    zero = 0b0000,
    gp   = 0b0001,
    sp   = 0b0010,
    bp   = 0b0011,
    ra   = 0b0100,
    r0   = 0b0101,
    r1   = 0b0110,
    r2   = 0b0111,
    r3   = 0b1000,
    r4   = 0b1001,
    r5   = 0b1010,
    r6   = 0b1011,
    r7   = 0b1100,
    rinp = 0b1101,
    rssd = 0b1110,
    rled = 0b1111,
    none = 0b11111

enum CondID:
    z    = 0b0000,
    nz   = 0b0001,
    gz   = 0b0010,
    lz   = 0b0011,
    ge   = 0b0100,
    le   = 0b0101,
    none = 0b11111

enum OpSize:
    byte  = 0b00,
    half  = 0b01,
    word  = 0b10,
    dword = 0b11,
    none  = 0b111

enum OffsetType:
    short          = 0b00,
    longContinuous = 0b01,
    longSplit      = 0b10,
    none           = 0b111

enum LiteralMode:
    Default,
    Upper,
    Lower,
    Relative

enum LiteralInsertMode:
    none,
    immShort,
    immLong,
    offShort,
    offLongContinuous,
    offLongSplit

pack LiteralInfo:
    var<LiteralMode> mode
    var<LiteralInsertMode> insertMode
    var<i32> value
    var<std.String*> label
    var<u32> insIndex
    var<u32> line
    var<u32> column



fn<LiteralInsertMode> litInsModeFromOffsetType(OffsetType ot) nodiscard:
    if ot == OffsetType.short: return LiteralInsertMode.offShort
    if ot == OffsetType.longContinuous: return LiteralInsertMode.offLongContinuous
    if ot == OffsetType.longSplit: return LiteralInsertMode.offLongSplit
    return LiteralInsertMode.none

fn<OffsetType> offsetTypeFromLitInsMode(LiteralInsertMode lim) nodiscard:
    if lim == LiteralInsertMode.offShort: return OffsetType.short
    if lim == LiteralInsertMode.offLongContinuous: return OffsetType.longContinuous
    if lim == LiteralInsertMode.offLongSplit: return OffsetType.longSplit
    return OffsetType.none

fn<InsCode> insCodeFromStr(std.String const* str) nodiscard:
    if str->equals("add"): return InsCode.add
    if str->equals("sub"): return InsCode.sub
    if str->equals("and"): return InsCode.and
    if str->equals("or"): return InsCode.or
    if str->equals("xor"): return InsCode.xor
    if str->equals("shl"): return InsCode.shl
    if str->equals("shr"): return InsCode.shr
    if str->equals("jz"): return InsCode.jz
    if str->equals("jnz"): return InsCode.jnz
    if str->equals("jgz"): return InsCode.jgz
    if str->equals("jlz"): return InsCode.jlz
    if str->equals("jge"): return InsCode.jge
    if str->equals("jle"): return InsCode.jle
    if str->equals("jrz"): return InsCode.jrz
    if str->equals("jrnz"): return InsCode.jrnz
    if str->equals("jrgz"): return InsCode.jrgz
    if str->equals("jrlz"): return InsCode.jrlz
    if str->equals("jrge"): return InsCode.jrge
    if str->equals("jrle"): return InsCode.jrle
    if str->equals("st"): return InsCode.st
    if str->equals("ld"): return InsCode.ld
    if str->equals("lui"): return InsCode.lui
    if str->equals("lli"): return InsCode.lli
    if str->equals("li"): return InsCode.li
    if str->equals("int"): return InsCode.int
    if str->equals("not"): return InsCode.not
    if str->equals("jpr"): return InsCode.jpr
    return InsCode.none

fn<u8 const*> insCodeToStr(InsCode ic) nodiscard:
    if ic == InsCode.add: return "add"
    if ic == InsCode.sub: return "sub"
    if ic == InsCode.and: return "and"
    if ic == InsCode.or: return "or"
    if ic == InsCode.xor: return "xor"
    if ic == InsCode.shl: return "shl"
    if ic == InsCode.shr: return "shr"
    if ic == InsCode.jz: return "jz"
    if ic == InsCode.jnz: return "jnz"
    if ic == InsCode.jgz: return "jgz"
    if ic == InsCode.jlz: return "jlz"
    if ic == InsCode.jge: return "jge"
    if ic == InsCode.jle: return "jle"
    if ic == InsCode.jrz: return "jrz"
    if ic == InsCode.jrnz: return "jrnz"
    if ic == InsCode.jrgz: return "jrgz"
    if ic == InsCode.jrlz: return "jrlz"
    if ic == InsCode.jrge: return "jrge"
    if ic == InsCode.jrle: return "jrle"
    if ic == InsCode.st: return "st"
    if ic == InsCode.ld: return "ld"
    if ic == InsCode.lui: return "lui"
    if ic == InsCode.lli: return "lli"
    if ic == InsCode.li: return "li"
    if ic == InsCode.int: return "int"
    if ic == InsCode.not: return "not"
    if ic == InsCode.jpr: return "jpr"
    return "none"

fn<OpCode> opCodeFromInsCode(InsCode ic) nodiscard:
    if ic == InsCode.add: return OpCode.add
    if ic == InsCode.sub: return OpCode.sub
    if ic == InsCode.and: return OpCode.and
    if ic == InsCode.or: return OpCode.or
    if ic == InsCode.xor: return OpCode.xor
    if ic == InsCode.shl: return OpCode.shl
    if ic == InsCode.shr: return OpCode.shr
    if ic == InsCode.jz || ic == InsCode.jnz || \
        ic == InsCode.jgz || ic == InsCode.jlz || \
        ic == InsCode.jge || ic == InsCode.jle || \
        ic == InsCode.jrz || ic == InsCode.jrnz || \
        ic == InsCode.jrgz || ic == InsCode.jrlz || \
        ic == InsCode.jrge || ic == InsCode.jrle:
        return OpCode.jxx
    if ic == InsCode.st: return OpCode.st
    if ic == InsCode.ld: return OpCode.ld
    if ic == InsCode.lui: return OpCode.lui
    if ic == InsCode.lli: return OpCode.lli
    if ic == InsCode.li: return OpCode.li
    return OpCode.none

fn<InsCode> insCodeFromOpCodeAndCond(OpCode oc, CondID cid) nodiscard:
    if oc == OpCode.add: return InsCode.add
    if oc == OpCode.sub: return InsCode.sub
    if oc == OpCode.and: return InsCode.and
    if oc == OpCode.or: return InsCode.or
    if oc == OpCode.xor: return InsCode.xor
    if oc == OpCode.shl: return InsCode.shl
    if oc == OpCode.shr: return InsCode.shr
    if oc == OpCode.jxx:
        if cid == CondID.z: return InsCode.jz
        if cid == CondID.nz: return InsCode.jnz
        if cid == CondID.gz: return InsCode.jgz
        if cid == CondID.lz: return InsCode.jlz
        if cid == CondID.ge: return InsCode.jge
        if cid == CondID.le: return InsCode.jle
        return InsCode.none
    if oc == OpCode.st: return InsCode.st
    if oc == OpCode.ld: return InsCode.ld
    if oc == OpCode.lui: return InsCode.lui
    if oc == OpCode.lli: return InsCode.lli
    if oc == OpCode.li: return InsCode.li
    if oc == OpCode.int: return InsCode.int
    return InsCode.none

fn<InsType> insTypeFromOpCode(OpCode oc) nodiscard:
    if oc == OpCode.add || oc == OpCode.sub || \
        oc == OpCode.and || oc == OpCode.or || oc == OpCode.xor || \
        oc == OpCode.shl || oc == OpCode.shr:
        return InsType.threeArg
    if oc == OpCode.jxx:
        return InsType.condBranch
    if oc == OpCode.st:
        return InsType.memWrite
    if oc == OpCode.ld:
        return InsType.memRead
    if oc == OpCode.lui:
        return InsType.immLoadUpper
    if oc == OpCode.lli:
        return InsType.immLoadLower
    if oc == OpCode.li || oc == OpCode.int:
        return InsType.immLoadFull

    handleMsgError("(internal): unknown opcode!")
    return InsType.none

fn<RegID> regIDFromStr(std.String const* str) nodiscard:
    if str->equals("zero"): return RegID.zero
    if str->equals("gp"): return RegID.gp
    if str->equals("sp"): return RegID.sp
    if str->equals("bp"): return RegID.bp
    if str->equals("ra"): return RegID.ra
    if str->equals("r0"): return RegID.r0
    if str->equals("r1"): return RegID.r1
    if str->equals("r2"): return RegID.r2
    if str->equals("r3"): return RegID.r3
    if str->equals("r4"): return RegID.r4
    if str->equals("r5"): return RegID.r5
    if str->equals("r6"): return RegID.r6
    if str->equals("r7"): return RegID.r7
    if str->equals("rinp"): return RegID.rinp
    if str->equals("rssd"): return RegID.rssd
    if str->equals("rled"): return RegID.rled
    return RegID.none

fn<u8 const*> regIDToStr(RegID rid) nodiscard:
    if rid == RegID.zero: return "zero"
    if rid == RegID.gp: return "gp"
    if rid == RegID.sp: return "sp"
    if rid == RegID.bp: return "bp"
    if rid == RegID.ra: return "ra"
    if rid == RegID.r0: return "r0"
    if rid == RegID.r1: return "r1"
    if rid == RegID.r2: return "r2"
    if rid == RegID.r3: return "r3"
    if rid == RegID.r4: return "r4"
    if rid == RegID.r5: return "r5"
    if rid == RegID.r6: return "r6"
    if rid == RegID.r7: return "r7"
    if rid == RegID.rinp: return "rinp"
    if rid == RegID.rssd: return "rssd"
    if rid == RegID.rled: return "rled"
    return "none"

fn<CondID> conditionFromInsCode(InsCode ic) nodiscard:
    if ic == InsCode.jz || ic == InsCode.jrz:
        return CondID.z
    if ic == InsCode.jnz || ic == InsCode.jrnz:
        return CondID.nz
    if ic == InsCode.jgz || ic == InsCode.jrgz:
        return CondID.gz
    if ic == InsCode.jlz || ic == InsCode.jrlz:
        return CondID.lz
    if ic == InsCode.jge || ic == InsCode.jrge:
        return CondID.ge
    if ic == InsCode.jle || ic == InsCode.jrle:
        return CondID.le

    return CondID.none

fn<OffsetType> offsetTypeFromInsType(InsType it) nodiscard:
    return OffsetType.none