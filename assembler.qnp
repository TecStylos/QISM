import "string.qnp"
import "stdio.qnp"
import "map.qnp"
import "list.qnp"
import "math.qnp"

import "errorhandler.qnp"

import "instructionHelpers.qnp"
import "stringToSevenSegment.qnp"

pack ArgParseData:
    var<OffsetType> offsetType
    var<RegID> register
    var<bool> hasOffset
    var<bool> offsetAlreadyUsed

pack ParityInstruction:
    var<u32> line
    var<u32> instruction

pack AssemblerData:
    var<std.String const*> code
    var<std.String const*> filename
    var<bool> verbose
    var<bool> addAnnotations
    var<u64> line
    var<u64> column
    var<u64> codeIndex
    var<u64> codeLength
    var<u64> nInstructions
    var<u32*> instructions
    var<ParityInstruction*> parityInstructions
    var<std.String**> annotations
    var<std.Map*> labels
    var<std.List*> literals



fn<> freeAsmData(AssemblerData* data):
    std.free(data->instructions)
    if data->annotations != null:
        var i = 0
        while i < data->nInstructions:
            std.delete(data->annotations[i])
            ++i
        std.free(data->annotations)

fn<u64> lineCount(std.String const* code) nodiscard:
    var<u64> count = 1
    var<u64> i = 0
    var<u64> codeLength = code->length()
    while i < codeLength:
        if code->at(i) == '\n':
            ++count
        ++i
    return count

fn<u32> widthToMask(AssemblerData* data, u32 width) nodiscard:
    if width == 0 || width > 32:
        handleAsmError("(internal): invalid width!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    var<u32> mask = 0
    while width-- != 0:
        mask = (mask << 1) | 1
    return mask

fn<> writeInsPart(AssemblerData* data, ?T part, u32 offset, u32 width):
    var<u32> mask = widthToMask(data, width)
    var<u32> overlap = data->parityInstructions[data->nInstructions].instruction & (mask << offset)

    if overlap != 0:
        handleAsmError("(internal): instruction bit overlap! (overlap: %b+8f0 %b+8f0 %b+8f0 %b+8f0)", data->filename, data->line, data->column, data->instructions, (overlap >> 24) & 0xFF, (overlap >> 16) & 0xFF, (overlap >> 8) & 0xFF, overlap & 0xFF)
        std.exit(1)

    var rawPart = (u32)part
    var writablePart = (rawPart & mask) << offset
    
    var instr = data->instructions[data->nInstructions]
    instr &= ~(mask << offset)
    instr |= writablePart
    data->instructions[data->nInstructions] = instr
    data->parityInstructions[data->nInstructions].instruction |= mask << offset

fn<> writeInsOpCode(AssemblerData* data, OpCode oc):
    writeInsPart(data, oc, INS_OPCODE_OFFSET, INS_OPCODE_WIDTH)

fn<> writeInsRegDest(AssemblerData* data, RegID rid):
    writeInsPart(data, rid, INS_REG_DEST_OFFSET, INS_REG_DEST_WIDTH)

fn<> writeInsJmpCondition(AssemblerData* data, CondID cid):
    if cid == CondID.none:
        handleAsmError("unknown condition!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    writeInsPart(data, cid, INS_JMP_COND_OFFSET, INS_JMP_COND_WIDTH)

fn<> writeInsOpSize(AssemblerData* data, OpSize ops):
    if ops == OpSize.none:
        handleAsmError("unknown operand size!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    writeInsPart(data, ops, INS_OP_SIZE_OFFSET, INS_OP_SIZE_WIDTH)

fn<> writeInsOffsetSelect(AssemblerData* data, i32 os):
    writeInsPart(data, os, INS_OFF_SEL_OFFSET, INS_OFF_SEL_WIDTH)

fn<> writeInsOffset(AssemblerData* data, i32 offset, OffsetType ot):
    if ot == OffsetType.short:
        writeInsPart(data, offset, INS_OFF_SHORT_OFFSET, INS_OFF_SHORT_WIDTH)
    elif ot == OffsetType.longContinuous:
        writeInsPart(data, offset, INS_OFF_LONG_CONT_OFFSET, INS_OFF_LONG_CONT_WIDTH)
    elif ot == OffsetType.longSplit:
        writeInsPart(data, offset, INS_OFF_LONG_SPLIT_LWR_OFFSET, INS_OFF_LONG_SPLIT_LWR_WIDTH)
        writeInsPart(data, offset >> 4, INS_OFF_LONG_SPLIT_UPR_OFFSET, INS_OFF_LONG_SPLIT_UPR_WIDTH)
    else:
        handleAsmError("unknown offset type %!", data->filename, data->line, data->column, data->instructions, (i32)ot)
        std.exit(1)

fn<> writeInsAutoFillOffset(AssemblerData* data, ArgParseData const* apd):
    if apd->offsetAlreadyUsed:
        return

    writeInsOffsetSelect(data, 0)
    writeInsOffset(data, 0, apd->offsetType)

fn<> writeInsRegSrc1(AssemblerData* data, ArgParseData const* apd):
    writeInsPart(data, apd->register, INS_REG_SRC1_OFFSET, INS_REG_SRC1_WIDTH)
    if apd->hasOffset:
        writeInsOffsetSelect(data, 0b0)

fn<> writeInsRegSrc2(AssemblerData* data, ArgParseData const* apd):
    writeInsPart(data, apd->register, INS_REG_SRC2_OFFSET, INS_REG_SRC2_WIDTH)
    if apd->hasOffset:
        writeInsOffsetSelect(data, 0b1)

fn<> writeInsImmLong(AssemblerData* data, i32 imm):
    writeInsPart(data, imm, INS_IMM_LONG_OFFSET, INS_IMM_LONG_WIDTH)

fn<> writeInsImmShort(AssemblerData* data, i32 imm):
    writeInsPart(data, imm, INS_IMM_SHORT_OFFSET, INS_IMM_SHORT_WIDTH)

fn<> writeInsUnused(AssemblerData* data, u32 offset, u32 width):
    writeInsPart(data, 0, offset, width)

fn<bool> parseWhitespace(AssemblerData* data):
    var<bool> parsedWhitespace = false
    while std.isspace(data->code->at(data->codeIndex)):
        ++data->codeIndex
        ++data->column
        parsedWhitespace = true

    return parsedWhitespace

fn<bool> parseExact(AssemblerData* data, u8 const* str) nodiscard:
    var<u64> i = 0
    var<u64> strLength = std.strlen(str)
    while i < strLength:
        if data->code->at(data->codeIndex + i) != str[i]:
            return false
        ++i
    data->codeIndex += strLength
    data->column += strLength
    return true

fn<bool> parseNewline(AssemblerData* data) nodiscard:
    if data->code->at(data->codeIndex) != '\n':
        return false

    ++data->codeIndex
    ++data->line
    data->column = 1
    return true

fn<std.String*> parseAlNum(AssemblerData* data, bool allowNegative) nodiscard:
    var str = std.new(std.String)

    if allowNegative && data->code->at(data->codeIndex) == '-':
        str->push_back('-')
        ++data->codeIndex
        ++data->column

    var<u8> c
    while std.isalnum(c = data->code->at(data->codeIndex)):
        str->push_back(c)
        ++data->codeIndex
        ++data->column

    return str

fn<bool> parseLabel(AssemblerData* data) nodiscard:
    if !parseExact(data, ":"):
        return false
    
    if !parseExact(data, ":"):
        handleAsmError("expected ':' after ':'!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    var name = parseAlNum(data, false)

    if name->length() == 0:
        handleAsmError("expected label name!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    parseWhitespace(data)
    if !parseNewline(data):
        handleAsmError("expected newline after label name!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    var<u32> address = data->nInstructions * 4

    if data->labels->contains(name):
        handleAsmError("label '%' already defined!", data->filename, data->line, data->column, data->instructions, name->raw())
        std.exit(1)

    data->labels->insert(name, (void*)address)

    if data->verbose:
        std.println("  info: label '%' has address 0x%x", name->raw(), address)

    return true

fn<InsCode> parseInsCode(AssemblerData* data) nodiscard:
    var oldIndex = data->codeIndex
    var oldColumn = data->column

    var insStr = parseAlNum(data, false)

    var insCode = insCodeFromStr(insStr)
    std.delete(insStr)

    if insCode == InsCode.none:
        data->codeIndex = oldIndex
        data->column = oldColumn
        return InsCode.none

    return insCode

fn<OpSize> parseOpSize(AssemblerData* data) nodiscard:
    if !parseExact(data, "."):
        return OpSize.none

    if parseExact(data, "b"):
        return OpSize.byte
    elif parseExact(data, "h"):
        return OpSize.half
    elif parseExact(data, "w"):
        return OpSize.word
    elif parseExact(data, "d"):
        return OpSize.dword
    else:
        handleAsmError("expected 'b', 'h', 'w' or 'd' after '.'!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    return OpSize.none

fn<> parseReg(AssemblerData* data, ArgParseData* apd):
    if !parseWhitespace(data):
        handleAsmError("Expected whitespace before register name!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    var name = parseAlNum(data, false)

    apd->register = regIDFromStr(name)
    std.delete(name)

    if apd->register == RegID.none:
        handleAsmError("expected register name!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    apd->hasOffset = false

fn<LiteralInfo*> makeLitInfo(AssemblerData const* data, LiteralInsertMode lim):
    var li = std.new(LiteralInfo)
    li->mode = LiteralMode.Default
    li->insertMode = lim
    li->insIndex = data->nInstructions
    li->line = data->line
    li->column = data->column
    li->label = null
    return li

fn<> parseLiteral(AssemblerData* data, LiteralInsertMode lim):
    var litInfo = makeLitInfo(data, lim)

    var str = parseAlNum(data, true)

    if str->equals("upr"):
        litInfo->mode = LiteralMode.Upper
        std.delete(str)
        if !parseWhitespace(data):
            handleAsmError("expected whitespace after 'upr'!", data->filename, data->line, data->column, data->instructions)
            std.exit(1)
        str = parseAlNum(data, true)
    elif str->equals("lwr"):
        litInfo->mode = LiteralMode.Lower
        std.delete(str)
        if !parseWhitespace(data):
            handleAsmError("expected whitespace after 'lwr'!", data->filename, data->line, data->column, data->instructions)
            std.exit(1)
        str = parseAlNum(data, true)
    elif str->equals("rel"):
        litInfo->mode = LiteralMode.Relative
        std.delete(str)
        if !parseWhitespace(data):
            handleAsmError("expected whitespace after 'rel'!", data->filename, data->line, data->column, data->instructions)
            std.exit(1)
        str = parseAlNum(data, true)
    elif str->equals("sts"):
        std.delete(str)
        litInfo->mode = LiteralMode.Default
        parseWhitespace(data)
        if !parseExact(data, "\""):
            handleAsmError("expected '\"' after 'sts'!", data->filename, data->line, data->column, data->instructions)
            std.exit(1)
        var strLit = std.new(std.String)
        while !parseExact(data, "\""):
            strLit->push_back(data->code->at(data->codeIndex))
            if ++data->codeIndex >= data->codeLength:
                handleAsmError("expected '\"' after string literal!", data->filename, data->line, data->column, data->instructions)
                std.exit(1)

        str = std.new(std.String, "0b")

        var i = 0
        while i < strLit->length():
            var part = stringToSevenSegment(strLit->at(i))
            if part == null:
                handleAsmError("unable to convert '%' to seven segment format!", data->filename, data->line, data->column, data->instructions, strLit->at(i))
            str->append(part)
            ++i

    if str->length() == 0:
        handleAsmError("expected literal!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)
    elif std.isalpha(str->at(0)):
        litInfo->label = str
    else:
        std.error.clear()

        if str->beginswith("0x"):
            litInfo->value = std.stoi(str->raw() + 2, 16)
        elif str->beginswith("0b"):
            litInfo->value = std.stoi(str->raw() + 2, 2)
        elif str->beginswith("0"):
            litInfo->value = std.stoi(str->raw() + 1, 8)
        else:
            litInfo->value = std.stoi(str->raw(), 10)

        if std.error.get() != std.error.ID.Success:
            handleAsmError("invalid literal '%'", data->filename, data->line, data->column, data->instructions, str->raw())
            std.exit(1)

    data->literals->push_back(litInfo)

fn<> parseRegOffset(AssemblerData* data, ArgParseData* apd):
    parseReg(data, apd)

    if !parseExact(data, "("):
        apd->hasOffset = false
        return

    if apd->offsetAlreadyUsed:
        handleAsmError("instructions may not have more than one offset specified!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    apd->offsetAlreadyUsed = true
    apd->hasOffset = true
    parseLiteral(data, litInsModeFromOffsetType(apd->offsetType))

    if !parseExact(data, ")"):
        handleAsmError("expected ')' after offset!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

fn<> parseInstructionThreeArg(AssemblerData* data, InsCode ic, OpSize ops):
    var<ArgParseData> apd
    apd.offsetType = OffsetType.short
    apd.register = RegID.none
    apd.hasOffset = false
    apd.offsetAlreadyUsed = false

    writeInsOpSize(data, ops)

    parseReg(data, &apd)
    writeInsRegDest(data, apd.register)
    
    parseRegOffset(data, &apd)
    writeInsRegSrc1(data, &apd)

    parseRegOffset(data, &apd)
    writeInsRegSrc2(data, &apd)

    writeInsAutoFillOffset(data, &apd)

fn<> parseInstructionCondBranch(AssemblerData* data, InsCode ic, OpSize ops):
    var<ArgParseData> apd
    apd.offsetType = OffsetType.short
    apd.register = RegID.none
    apd.hasOffset = false
    apd.offsetAlreadyUsed = false

    writeInsOpSize(data, ops)

    writeInsJmpCondition(data, conditionFromInsCode(ic))

    parseRegOffset(data, &apd)
    writeInsRegSrc1(data, &apd)

    parseRegOffset(data, &apd)
    writeInsRegSrc2(data, &apd)

    writeInsAutoFillOffset(data, &apd)

fn<> parseInstructionMemRead(AssemblerData* data, InsCode ic, OpSize ops):
    var<ArgParseData> apd
    apd.offsetType = OffsetType.longContinuous
    apd.register = RegID.none
    apd.hasOffset = false
    apd.offsetAlreadyUsed = false

    writeInsOpSize(data, ops)

    parseReg(data, &apd)
    writeInsRegDest(data, apd.register)

    parseRegOffset(data, &apd)
    writeInsRegSrc1(data, &apd)

    writeInsAutoFillOffset(data, &apd)

fn<> parseInstructionMemWrite(AssemblerData* data, InsCode ic, OpSize ops):
    var<ArgParseData> apd
    apd.offsetType = OffsetType.longSplit
    apd.register = RegID.none
    apd.hasOffset = false
    apd.offsetAlreadyUsed = false

    writeInsOpSize(data, ops)
    
    parseRegOffset(data, &apd)
    writeInsRegSrc1(data, &apd)
    
    parseRegOffset(data, &apd)
    writeInsRegSrc2(data, &apd)

    writeInsAutoFillOffset(data, &apd)

fn<> parseImmediateFull(AssemblerData* data, ArgParseData* apd):
    if !parseWhitespace(data):
        handleAsmError("expected whitespace before immediate!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)
    parseLiteral(data, LiteralInsertMode.immLong)

fn<> parseImmediatePartial(AssemblerData* data, ArgParseData* apd):
    if !parseWhitespace(data):
        handleAsmError("expected whitespace before immediate!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)
    parseLiteral(data, LiteralInsertMode.immShort)

fn<> parseInstructionImmLoadFull(AssemblerData* data, InsCode ic):
    var<ArgParseData> apd
    apd.register = RegID.none
    apd.hasOffset = false
    apd.offsetAlreadyUsed = false
    
    parseReg(data, &apd)
    writeInsRegDest(data, apd.register)

    parseImmediateFull(data, &apd)

fn<> parseInstructionImmLoadPartial(AssemblerData* data, InsCode ic):
    var<ArgParseData> apd
    apd.register = RegID.none
    apd.hasOffset = false
    apd.offsetAlreadyUsed = false
    
    parseReg(data, &apd)
    writeInsRegDest(data, apd.register)

    writeInsRegSrc1(data, &apd)

    parseImmediatePartial(data, &apd)

    writeInsUnused(data, INS_IMM_SHORT_UNUSED_OFFSET, INS_IMM_SHORT_UNUSED_WIDTH)

fn<bool> parseInstruction(AssemblerData* data) nodiscard:
    var<u64> lineBegin = data->codeIndex

    var insCode = parseInsCode(data)
    if insCode == InsCode.none:
        return false

    var opSize = parseOpSize(data)
    if opSize == OpSize.none:
        opSize = OpSize.word

    var opCode = opCodeFromInsCode(insCode)
    data->parityInstructions[data->nInstructions].line = data->line
    data->parityInstructions[data->nInstructions].instruction = 0

    writeInsOpCode(data, opCode)

    var insType = insTypeFromOpCode(opCode)
    if insType == InsType.threeArg:
        parseInstructionThreeArg(data, insCode, opSize)
    elif insType == InsType.condBranch:
        parseInstructionCondBranch(data, insCode, opSize)
    elif insType == InsType.memRead:
        parseInstructionMemRead(data, insCode, opSize)
    elif insType == InsType.memWrite:
        parseInstructionMemWrite(data, insCode, opSize)
    elif insType == InsType.immLoadFull:
        parseInstructionImmLoadFull(data, insCode)
    elif insType == InsType.immLoadLower || insType == InsType.immLoadUpper:
        parseInstructionImmLoadPartial(data, insCode)
    else:
        handleAsmError("(internal): instruction type not implemented!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    var<u64> lineEnd = data->codeIndex

    if data->addAnnotations:
        data->annotations[data->nInstructions] = std.new(std.String, data->code->raw() + lineBegin, lineEnd - lineBegin)
    ++data->nInstructions

    if !parseNewline(data):
        handleAsmError("expected newline after instruction", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    return true

fn<bool> parseComment(AssemblerData* data) nodiscard:
    if !parseExact(data, "~"):
        return false

    if !parseExact(data, "~"):
        handleAsmError("expected '~' after '~'!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    while data->code->at(data->codeIndex) != '\n':
        ++data->codeIndex
        ++data->column

    if !parseNewline(data):
        handleAsmError("expected newline after comment", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    return true

fn<> checkLiteralRange(i32 value, LiteralInsertMode lim, AssemblerData* data, u32 line, u32 column):
    var<i32> minVal = 0
    var<i32> maxVal = 0

    if lim == LiteralInsertMode.immShort:
        minVal = -std.pow(2, INS_IMM_SHORT_WIDTH - 1)
        maxVal =  std.pow(2, INS_IMM_SHORT_WIDTH - 1) - 1
    elif lim == LiteralInsertMode.immLong:
        minVal = -std.pow(2, INS_IMM_LONG_WIDTH - 1)
        maxVal =  std.pow(2, INS_IMM_LONG_WIDTH - 1) - 1
    elif lim == LiteralInsertMode.offShort:
        minVal = -std.pow(2, INS_OFF_SHORT_WIDTH - 1)
        maxVal =  std.pow(2, INS_OFF_SHORT_WIDTH - 1) - 1
    elif lim == LiteralInsertMode.offLongContinuous || \
        lim == LiteralInsertMode.offLongSplit:
        minVal = -std.pow(2, INS_OFF_LONG_CONT_WIDTH - 1)
        maxVal =  std.pow(2, INS_OFF_LONG_CONT_WIDTH - 1) - 1
    else:
        handleAsmError("(internal): literal insert mode not implemented!", data->filename, line, column, data->instructions)
        std.exit(1)


    if value < minVal || value > maxVal:
        handleAsmError("literal value '%' out of range (% to %)", data->filename, line, column, data->instructions, value, minVal, maxVal)
        std.exit(1)

fn<i32> extendLiteralValue(AssemblerData* data, i32 val, LiteralInsertMode lim) nodiscard:
    var<u32> mask
    var<u32> msb
    if lim == LiteralInsertMode.immShort:
        mask = ~widthToMask(data, INS_IMM_SHORT_WIDTH)
        msb  =  INS_IMM_SHORT_WIDTH - 1
    elif lim == LiteralInsertMode.immLong:
        mask = ~widthToMask(data, INS_IMM_LONG_WIDTH)
        msb  =  INS_IMM_LONG_WIDTH - 1
    elif lim == LiteralInsertMode.offShort:
        mask = ~widthToMask(data, INS_OFF_SHORT_WIDTH)
        msb  =  INS_OFF_SHORT_WIDTH - 1
    elif lim == LiteralInsertMode.offLongContinuous || \
        lim == LiteralInsertMode.offLongSplit:
        mask = ~widthToMask(data, INS_OFF_LONG_CONT_WIDTH)
        msb  =  INS_OFF_LONG_CONT_WIDTH - 1
    else:
        handleAsmError("(internal): literal insert mode not implemented!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    var allZeroes = (val & mask) == 0
    var msbIsSet = ((val >> msb) & 1) == 1

    if allZeroes && msbIsSet:
        val |= mask
    
    return val


fn<> insertLiterals(AssemblerData* data):
    var nInstructionsBackup = data->nInstructions

    while !data->literals->empty():
        var litInfo = data->literals->pop_front({LiteralInfo*})

        data->line = litInfo->line
        data->column = litInfo->column
        data->nInstructions = litInfo->insIndex

        var<i32> value = litInfo->value
        if litInfo->label != null:
            if data->labels->contains(litInfo->label):
                value = (i32)data->labels->get(litInfo->label)
            else:
                handleAsmError("label '%' not found", data->filename, data->line, data->column, data->instructions, litInfo->label->raw())
                std.exit(1)

        if litInfo->mode == LiteralMode.Upper:
            value = (value >> 16) & 0xFFFF
        elif litInfo->mode == LiteralMode.Lower:
            value = value & 0xFFFF
        elif litInfo->mode == LiteralMode.Relative:
            value = value - (data->nInstructions * 4)


        value = extendLiteralValue(data, value, litInfo->insertMode)
        checkLiteralRange(value, litInfo->insertMode, data, data->line, data->column)

        if litInfo->insertMode == LiteralInsertMode.immShort:
            writeInsImmShort(data, value)
        elif litInfo->insertMode == LiteralInsertMode.immLong:
            writeInsImmLong(data, value)
        else:
            writeInsOffset(data, value, offsetTypeFromLitInsMode(litInfo->insertMode))

        std.free(litInfo)

    std.delete(data->literals)
    data->nInstructions = nInstructionsBackup

fn<> checkParity(AssemblerData* data):
    \\ Check parity of all instructions
    var i = 0
    while i < data->nInstructions:
        var instruction = data->parityInstructions[i].instruction
        if instruction != 0xFFFFFFFF:
            handleAsmError("(internal): parity bit mismatch! (%b+8f0 %b+8f0 %b+8f0 %b+8f0 -- 0 indicates unset bit)", data->filename, data->parityInstructions[i].line, 1, data->instructions, (instruction >> 24) & 0xFF, (instruction >> 16) & 0xFF, (instruction >> 8) & 0xFF, instruction & 0xFF)
            std.exit(1)
        ++i
    std.free(data->parityInstructions)

fn<> assemble(AssemblerData* data):
    data->line = 1
    data->column = 1
    data->codeIndex = 0
    data->codeLength = data->code->length()
    data->nInstructions = 0
    data->instructions = null
    data->annotations = null
    data->labels = std.new(std.Map, \
        lambda<bool>(void const* a, void const* b): \
            return ((std.String const*)a)->compare((std.String const*)b) == std.Order.Less;, \
        lambda<void>(void* key): \
            std.delete((std.String*)key);, \
        lambda<void>(void* value): \
            pass; \
        )
    data->literals = std.new(std.List, std.LMBD_DELETE_DT(LiteralInfo))

    var lc = lineCount(data->code)
    var instrBuffSize = lc * 4
    if data->verbose: std.println("  info: allocating % bytes of instruction memory...", instrBuffSize)
    data->instructions = (u32*)std.malloc(instrBuffSize)
    if data->instructions == null:
        handleMsgError("failed to allocate instruction memory")
        std.exit(1)

    var parityBuffSize = lc * sizeof(ParityInstruction)
    if data->verbose: std.println("  info: allocating % bytes of parity instruction memory...", parityBuffSize)
    data->parityInstructions = (ParityInstruction*)std.malloc(parityBuffSize)
    if data->parityInstructions == null:
        handleMsgError("failed to allocate parity instruction memory")
        std.exit(1)

    if data->addAnnotations:
        var annotBuffSize = lc * sizeof(std.String*)
        if data->verbose: std.println("  info: allocating % bytes of annotation memory...", annotBuffSize)
        data->annotations = (std.String**)std.malloc(annotBuffSize)
        if data->annotations == null:
            handleMsgError("failed to allocate instruction line memory")
            std.exit(1)

    while data->codeIndex < data->codeLength:
        parseWhitespace(data)

        if parseNewline(data): continue
        if parseLabel(data): continue
        if parseInstruction(data): continue
        if parseComment(data): continue
        
        handleAsmError("unexpected character!", data->filename, data->line, data->column, data->instructions)
        std.exit(1)

    if data->verbose: std.println("  info: # of instructions: %", data->nInstructions)

    if data->verbose: std.println("  info: inserting literals...")
    insertLiterals(data)

    if data->verbose: std.println("  info: checking parity...")
    checkParity(data)